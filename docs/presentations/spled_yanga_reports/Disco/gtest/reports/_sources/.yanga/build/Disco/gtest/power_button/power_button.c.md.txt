# power_button.c

## Functions

### powerButtonInit

< Counter for key releases.

```{code-block} c
:linenos:
:lineno-start: 24

void powerButtonInit(void)
{
    currentState = INIT;
    pressCounter = 0;
    releaseCounter = 0;
}
```

### powerButton

@brief Debounces key presses and releases.

This function utilizes a state machine to debounce key presses and releases.
It must be called periodically to process the debouncing. The behavior is controlled
by two configuration parameters: POWER_BUTTON_PRESS_DEBOUNCE and POWER_BUTTON_RELEASE_DEBOUNCE which determine
how many consecutive calls with the key pressed/released are required to acknowledge the
state transition.

```{code-block} c
:linenos:
:lineno-start: 40

void powerButton(void)
{
    boolean powerKeyPressed = FALSE;
    boolean keyStatus = RteIsKeyPressed(POWER_BUTTON_KEY);

    // Update the counters
    if (keyStatus)
    {
        pressCounter++;
        releaseCounter = 0; // reset release counter if key is pressed
    }
    else
    {
        releaseCounter++;
        pressCounter = 0; // reset press counter if key is released
    }

    switch (currentState)
    {
    case INIT:
        if (pressCounter >= POWER_BUTTON_PRESS_DEBOUNCE)
        {
            powerKeyPressed = TRUE;
            currentState = PRESSED;
            releaseCounter = 0; // reset the counter after transition
            pressCounter = 0;   // reset the counter after transition
        }
        else if (releaseCounter >= POWER_BUTTON_RELEASE_DEBOUNCE)
        {
            currentState = RELEASED;
            releaseCounter = 0; // reset the counter after transition
            pressCounter = 0;   // reset the counter after transition
        }
        break;

    case PRESSED:
        if (releaseCounter >= POWER_BUTTON_RELEASE_DEBOUNCE)
        {
            currentState = RELEASED;
            releaseCounter = 0; // reset the counter after transition
        }
        pressCounter = 0; // reset the counter after transition
        break;

    case RELEASED:
        if (pressCounter >= POWER_BUTTON_PRESS_DEBOUNCE)
        {
            powerKeyPressed = TRUE;
            currentState = PRESSED;
            pressCounter = 0; // reset the counter after transition
        }
        releaseCounter = 0; // reset the counter after transition
        break;
    }

    RteSetPowerKeyPressedEvent(powerKeyPressed);
}
```
