# brightness_controller.c

## Functions

### periodicBrightnessAdjustment

```{impl} Periodic Brightness Adjustment
   :id: SWIMPL_BC-001
   :implements: SWDD_BC-100, SWDD_BC-102
```

```{code-block} c
:linenos:
:lineno-start: 19

brightness_t periodicBrightnessAdjustment(BrightnessAdjustmentData *data)
{
    brightness_t brightnessValue = 0;

    if (data->ticksCounter < data->halfPeriod)
    {
        // Ramp up linearly from min to max
        brightnessValue = data->minBrightness + ((data->maxBrightness - data->minBrightness) * data->ticksCounter) / data->halfPeriod;
    }
    else
    {
        // Ramp down linearly from max to min
        brightnessValue = data->maxBrightness - ((data->maxBrightness - data->minBrightness) * (data->ticksCounter - data->halfPeriod)) / data->halfPeriod;
    }

    // Increment and reset ticksCounter based on the period
    data->ticksCounter = (data->ticksCounter + 1) % data->period;

    return brightnessValue;
}
```

### brightnessController

```{impl} Brightness Controller runnable
   :id: SWIMPL_BC-003
   :implements: SWDD_BC-200, SWDD_BC-202, SWDD_BC-203
```

```{code-block} c
:linenos:
:lineno-start: 72

void brightnessController(void)
{
    brightness_t brightnessValue = 0;
#ifdef CONFIG_BRIGHTNESS_ADJUSTMENT_AUTOMATIC
    static BrightnessAdjustmentData data = {
        .ticksCounter = 0,
        .period = BRIGHTNESS_PERIOD_TICKS,
        .halfPeriod = BRIGHTNESS_PERIOD_TICKS / 2,
        .maxBrightness = 200,
        .minBrightness = 50};

    brightnessValue = periodicBrightnessAdjustment(&data);
    RteSetBrightnessAdjustmentCounter(data.ticksCounter);
#elif defined(CONFIG_BRIGHTNESS_ADJUSTMENT_MANUAL)
    brightnessValue = manualBrightnessAdjustment();
#endif
    RteSetBrightnessValue(brightnessValue);
}
```
